mini
sapply(whichMin(x = dframe$summer, y = dframe$baseline))
sapply(x = dframe$summer, y = dframe$baseline, FUN = whichMin)
sapply(x = dframe$summer, FUN = whichMin)
sapply(dframe, function(x) FUN = whichMin(x[[1]]))
sapply(dframe, function(x,y) FUN = whichMin(x[[1]]))
sapply(dframe, function(x,y) FUN = whichMin(x[[1],x[[2]]]))
sapply(dframe, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
lapply(dframe, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
lapply(dframe, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
lapply(dframe[,c("tier2base","tier2")], function(x,y) FUN = whichMin(x= x[1], y = x[2]))
lapply(dframe[,c("tier2base","tier2")], function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
apply(dframe[,c("tier2base","tier2")], function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
apply(dframe[,c("tier2base","tier2")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
whichMin <- function(x, y, comp = min){
x <- x*1
y <- y*2
c(x,y)
}
apply(dframe[,c("tier2base","tier2")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
whichMin <- function(x, y, comp = min){
x <- x*1
y <- y*2
comp(x,y)
}
apply(dframe[,c("tier2base","tier2")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
str(mini)
sapply(dframe[,c("tier2base","tier2")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
sapply(dframe[,c("tier2base","tier2")], function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
apply(dframe[,c("tier2base","tier2")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
dframe[,c("tier2base","tier2")]
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c(1:2)],1,min)
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
dframe
dframe[,c("summer","baseline")]
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c(1:2)],1,min)
dframe$tier2 <- dframe$summer-dframe$tier1
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]])) - dframe$tier2
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[[2]]))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[[1]], y = x[2]))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe$tier2 <- NULL
dframe
dframe$tier2 <- apply(dframe[,c("baseline","summer")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline",0)], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
whichMin <- function(x, y, comp = min){
x <- x*1
y <- y*2
comp(x,y)
}
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe$tier2 <- dframe$tier2-apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c(1:2)],1,min)
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
dframe$tier2 <- apply(dframe[,c("tier2base","tier2")],1,min)
whichMin <- function(x, y, mult, comp = min){
x <- x*mult[1]
y <- y*multt[2]
comp(x,y)
}
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2], mult = c(2,1)))
whichMin <- function(x, y, mult, comp = min){
x <- x*mult[1]
y <- y*mult[2]
comp(x,y)
}
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2], mult = c(2,1)))
dframe
whichMin <- function(x, y, comp = min){
x <- x*2
y <- y*1
comp(x,y)
}
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
whichMin <- function(x, y, comp = min){
x <- x*2
y <- y*1
comp(x,y,0)
}
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2]))
dframe
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c(:2)],1,min)
dframe$tier1 <- apply(dframe[,c(1:2)],1,min)
dframe
whichMin <- function(x, y, comp = min){
x <- x*mult[1]
y <- y*mult[1]
comp(x,y,0)
}
whichMin <- function(x, y, mult, comp = min){
x <- x*mult[1]
y <- y*mult[2]
comp(x,y,0)
}
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
whichMin <- function(x, y, mult, comp = min){
x <- x*mult[1]
y <- y*mult[2]
comp(x,y)
}
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier1b <- apply(dframe[,c(1:2)],1,min)
dframe
dframe
dframe <- data.frame(baseline = baseline,summer = summer)
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
dframe$tier2 <- apply(dframe[,c("baseline","summer")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(2,1)))
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
dframe$tier2base <- 2*dframe$baseline
dframe
dframe$tier1 <- apply(dframe$baseline,dframe$summer], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier1 <- apply(dframe$baseline,dframe$summer, 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier1 <- apply(c(dframe$baseline,dframe$summer), 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
whichMin(x=1,y=1,mult = c(1,1))
whichMin(x=1,y=1,mult = c(1,2))
whichMin(x=1,y=1,mult = c(2,2))
whichMin(x=1,y=1,mult = 1)
whichMin
whichMin(x=1,y=1,mult = 1, comp = min)
whichMin(x=1,y=1, mult = (1,2), comp = min)
whichMin(x=1,y=1, mult = (1,2), comp = min)
whichMin(x=1,y=1, mult = c(1,2), comp = min)
whichMin(x=4,y=1, mult = c(1,2), comp = min)
whichMin
whichMin(x=4,y=1, mult = c(1,2), comp = max)
whichMin(x=4,y=1, mult = c(2,2), comp = max)
whichMin(x=4,y=1, mult = c(2,2), comp = median)
whichMin(x=4,y=2, mult = c(2,2), comp = median)
whichMin(x=4,y=2, mult = c(2,2), comp = sd)
whichMin(x=4,y=2, mult = c(2,2), comp = ^2)
whichMin(x=4,y=2, mult = c(2,2), comp = 2)
whichMin(x=4,y=2, mult = c(2,2), comp = sum)
whichMin(x=4,y=2, mult = c(1,1), comp = sum)
whichMin(x=4,y=2, mult = c(1,1), comp = median)
whichMin
whichMin(x=4,y=2, mult = c(1,1), comp = median)
median(4,2)
mean(4,2)
mean
mean(c(4,2))
whichMin(x=4,y=2, mult = c(1,1), comp = min)
whichMin(x=4,y=2, mult = c(1,1), comp = max)
whichMin(x=4,y=2, mult = c(1,1), comp = mode)
whichMin(x=4,y=2, mult = c(1,1), comp = max)
whichMin(x=4,y=2, mult = c(1,1), comp = min)
whichMin(x=4,y=2, mult = c(1,2), comp = min)
min(1:39)
dframe$tier2 <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe
dframe$tier3 <- dframe$tierZero - dframe$tier2
dframe
dframe$tier3 <- dframe$tierZero - dframe$tier2
dframe
dframe$tierZero <- dframe$tier1-apply(dframe[,c("tier2base","tier2")],1,min)
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)-dframe$tier1
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","baseline")],1,min)
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe$tier3 <- dframe$tierZero - dframe$tier2
dframe
dframe$tier3 <- dframe$tier3 - dframe$tierZero
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe$tier3 <- dframe$tierZero - dframe$tier2
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","baseline")],1,min)-dframe$tier1
dframe
dframe$tierZero <- apply(dframe[,c("tier2base","tier2")],1,min)-dframe$tier1
dframe
dframe$summer/.2
dframe$summer*.2
dframe$summer/1.2
dframe$summer/2
dframe$baseline/2
dframe$summer/2
dframe$tier2base <- 2*dframe$baseline
dframe$tier2 <- apply(dframe[,c("tier2base","tier2")],1,min)
dframe
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- dframe$summer-dframe$tier1
dframe
dframe$tier2 <- apply(dframe[,c("tier1","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2)))
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1),comp = max))
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- apply(dframe[,c("tier1","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = max))
dframe
dframe$tier2 <- apply(dframe[,c("tier1","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = max))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = max))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$tier2 <- dframe$tier2 - dframe$tier1
dframe
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier2 <- dframe$tier2 - dframe$tier1
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$tier3 <- dframe$summer - dframe$tier3
dframe
dframe$tier3 <- apply(dframe[,c("tier1":"tier3")], 1, sum)
dframe$tier3 <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$tier3 <- dframe$summer - dframe$tier3
dframe$total <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe
baseline <- rep(1100, 10)
summer <- sample(x = 1:560, 10)
demoDF <- dframe
demoDF
baseline <- rep(1100, 10)
summer <- sample(x = 1:560, 10)
dframe <- data.frame(baseline = baseline,summer = summer)
dframe
summer <- summer*10.4
dframe <- data.frame(baseline = baseline,summer = summer)
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$tier2 <- dframe$tier2 - dframe$tier1
dframe
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier3 <- dframe$summer - dframe$tier3
dframe$total <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe
dframe$tier1b <- dframe$summer - 1*dframe$baseline
dframe
dframe$tier1b <-2*dframe$baseline -dframe$summer
dframe
dframe$tier1b <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2b <- dframe$summer - dframe$baseline - dframe$tier1
dframe
dframe$tier2b <- 2*dframe$baseline dframe$summer - dframe$baseline - dframe$tier1
dframe$tier2b <- 2*dframe$baseline - dframe$summer - dframe$baseline - dframe$tier1
dframe
baseline <- rep(1100, 10)
summer <- sample(x = 1:560, 10)
summer <- summer*10.4
dframe <- data.frame(baseline = baseline,summer = summer)
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$tier2 <- dframe$tier2 - dframe$tier1
dframe
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier3 <- dframe$summer - dframe$tier3
dframe
dframe$total <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe
dframe$match <- identical(dframe$total, dframe$summer)
dframe
baseline <- rep(1100, 10)
summer <- sample(x = 1:560, 10)
summer <- summer*10.4
dframe <- data.frame(baseline = baseline,summer = summer)
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier2 <- dframe$tier2 - dframe$tier1
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier3 <- dframe$summer - dframe$tier3
dframe$total <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe$match <- identical(dframe$total, dframe$summer)
dframe
dframe$tier3b <- dframe$summer - apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier2 <- dframe$tier2 - dframe$tier1
dframe
dframe$tier2b <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min)) - dframe$tier1
dframe
dframe$tier3 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$tier3 <- dframe$summer - dframe$tier3
dframe$tier3b <- dframe$summer - apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe
dframe$total <- apply(dframe[,c("tier1","tier2b","tier3b")], 1, sum)
dframe
dframe$match <- identical(dframe$total, dframe$summer)
dframe
dframe$total <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe$totalb <- apply(dframe[,c("tier1","tier2b","tier3b")], 1, sum)
dframe
baseline <- rep(1100, 10)
summer <- sample(x = 1:560, 10)
summer <- summer*10.4
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier2b <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min)) - dframe$tier1
dframe$tier3b <- dframe$summer - apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$totalb <- apply(dframe[,c("tier1","tier2b","tier3b")], 1, sum)
dframe$match <- identical(dframe$total, dframe$summer)
dframe
dframe$match <- identical(dframe$totalb, dframe$summer)
dframe
baseline <- rep(1100, 10)
summer <- sample(x = 1:560, 10)
summer <- summer*10.4
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier2b <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min)) - dframe$tier1
dframe$tier3b <- dframe$summer - apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$totalb <- apply(dframe[,c("tier1","tier2b","tier3b")], 1, sum)
dframe
dframe <- data.frame(baseline = baseline,summer = summer)
dframe$tier1 <- apply(dframe[,c("summer","baseline")], 1, function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,1)))
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min)) - dframe$tier1
dframe$tier3 <- dframe$summer - apply(dframe[,c("summer","baseline")], 1,
function(x,y) FUN = whichMin(x= x[1], y = x[2],mult = c(1,2),comp = min))
dframe$total <- apply(dframe[,c("tier1","tier2","tier3")], 1, sum)
dframe$match <- identical(dframe$totalb, dframe$summer)
dframe
dframe$match <- identical(dframe$totalb, dframe$summer)
dframe
dframe$match <- identical(dframe$total, dframe$summer)
dframe
demoDF <- rbind(demoDF, dframe)
demoDF
demoDF <- rbind(demoDF, dframe[,1:6])
demoDF
dframe$tier2 <- apply(dframe[,c("summer","baseline")], 1,
function(x,y) whichMin(x = x[1], y = x[2],mult = c(1,2),comp = min)) - dframe$tier1
dframe
?rollMean()
?rollmean()
library(lubridate)
library(dplyr)
library(tidyr)
data(lakers)
head(lakers)
str(lakers)
head(lakers)
tapply(lakers$points, lakers[,c("opponent", "game_type")], sum, na.rm = TRUE)
head(lakers)
tapply(lakers$points, lakers[,c("opponent", "game_type","date")], sum, na.rm = TRUE)
tapply(lakers$points, lakers[,c("opponent", "game_type")], sum, na.rm = TRUE)
kobe <- lakers %>%
# filter(player == "Kobe Bryant") %>%
filter(player == "Kobe Bryant", team == "LAL") %>%
group_by(date, opponent, game_type, player) %>%
summarize(points = sum(points),
made = (sum(etype == "shot" & result == "made")),
attempted = sum(etype == "shot"),
three = (sum(etype == "shot" & points == "3")),
rebound = sum(etype == "rebound"),
turnover = sum(etype == "turnover")) %>%
mutate(fgPer = (made / attempted))
kobe
kobe[20,]
summary(as.factor(kobe$opponent))
summary(kobe)
summary(as.factor(kobe$opponent))
head(lakers)
summary(as.factor(lakers$etype))
table(kobe$etype, kobe$result)
tapply(baseball$h, baseball$id, sum)
unique(lakers$player)[team]
library(dplyr)
unique(lakers$player)[team]
apply(unique(lakers$date),nrow)
table((as.factor(lakers$game_type)))
summary(as.factor(lakers$type))
kobe <- lakers[lakers$player == "Kobe Bryant",]
kobe
kobeAgg <- kobe %>%
group_by(opponent, game_type) %>%
summarise(n = n()) %>%
arrange(opponent)
kobeAgg
kobeAgg <- kobe %>%
group_by(opponent, game_type, date) %>%
summarise(n = n()) %>%
arrange(opponent)
kobeAgg
kobeAgg <- kobe %>%
filter(etype == 'shot', !is.na(x)) %>%
group_by(type, result, points, x, y, xy) %>%
mutate(xy = paste(x,y, sep = ","))
summarise(n = n(),
total = sum(y))
kobeAgg <- kobe %>%
filter(etype == 'shot', !is.na(x)) %>%
group_by(type, result, points, x, y, xy) %>%
mutate(xy = paste(x,y, sep = ","))
kobe['etype' == " ", ]
head(aggregate(cbind(points, period) ~ player + team + game_type, lakers, sum))
head(aggregate(cbind(points) ~ player + team + game_type, lakers, sum))
ggplot(data = kobe)+
geom_jitter(aes(x = x, y = y, color = result)) +
ylim(5,50)
library(ggplot2)
ggplot(data = kobe)+
geom_jitter(aes(x = x, y = y, color = result)) +
ylim(5,50)
kobeAggSum <- aggregate(cbind(points,etype) ~ date + opponent + game_type, kobe, sum)
kobeAgg <- aggregate(cbind(points,etype) ~ date + opponent + game_type, kobe, sum)
diamondShort <- aggregate(cbind(price, carat) ~ cut + color + clarity, diamonds, sum)
diamondShort
messy <- data.frame(
id = 1:4,
trt = sample(rep(c('control', 'treatment'), each = 2)),
work.T1 = runif(4),
home.T1 = runif(4),
work.T2 = runif(4),
home.T2 = runif(4)
)
messy
mess2 <- messy %>%
gather(key = location, value = dose, - c(id, trt)) %>%
separate(location, c("location","time")) %>%
group_by(id, trt, location, time) %>%
summarize(n = mean(dose))
library(dplyr)
library(tidyr)
mess2 <- messy %>%
gather(key = location, value = dose, - c(id, trt)) %>%
separate(location, c("location","time")) %>%
group_by(id, trt, location, time) %>%
summarize(n = mean(dose))
mess2
mess2 <- messy %>%
gather(key = location, value = dose, - c(id, trt))
mess2
messy
messy
unite_(mtcars, "vs_am", c("vs","am"))
